#!/usr/bin/env python

import argparse
import copy
import contextlib
from collections import namedtuple
import datetime
import json
import getpass
import socket
import urllib2
try:
    import ConfigParser as configparser
except ImportError:
    import configparser


# URL to ElasticSearch instance to store opslogs
ES_URL = 'http://localhost:9200/opslog/log'
WEBHOOK_URL = 'https://zapier.com/hooks/catch/your-hook-code-here/'
CONFIG_FILE = '/etc/opslog.conf'


def success(msg):
    """Prints green text"""
    print('\033[92m{}\033[0m'.format(msg))


def error(msg):
    """Prints red text"""
    print('\033[91m{}\033[0m'.format(msg))


# cribbed from
# http://blog.paphus.com/blog/2012/09/04/simple-ascii-tables-in-python/
def print_table(tbl_list, separate_head=True):
    """Prints a formatted table given a list of dictionaries"""
    header = tbl_list[0].keys()
    lines = [header]
    for row in tbl_list:
        try:
            lines.append([row[col] for col in header])
        except KeyError:
            pass

    # Count the column width
    widths = []
    for line in lines:
        for i, size in enumerate([len(x) for x in line]):
            while i >= len(widths):
                widths.append(0)
            if size > widths[i]:
                widths[i] = size

    # Generate the format string to pad the columns
    print_string = ""
    for i, width in enumerate(widths):
        print_string += "{" + str(i) + ":" + str(width) + "} | "
    if (len(print_string) == 0):
        return
    print_string = print_string[:-3]

    # Print the actual data
    for i, line in enumerate(lines):
        cell = print_string.format(*line)
        print(i == 0 and cell.upper() or cell)
        if (i == 0 and separate_head):
            print("-" * (sum(widths) + 3 * (len(widths) - 1)))


def http_request(url, data=None):
    request = urllib2.Request(url, data)
    opener = urllib2.OpenerDirector()
    opener.add_handler(urllib2.HTTPHandler())
    opener.add_handler(urllib2.HTTPSHandler())
    opener.add_handler(urllib2.HTTPDefaultErrorHandler())

    with contextlib.closing(opener.open(request)) as http_resp:
        response = http_resp.read()
    return http_resp.code, response

class FakeSectionHead(object):
    """Fakes an ini section header like expected by configparser"""
    header = '[global]'

    def __init__(self, fp):
        self.fp = fp
        self.sechead = '{}\n'.format(self.header)

    def readline(self):
        if self.sechead:
            try:
                return self.sechead
            finally:
                self.sechead = None
        else:
            return self.fp.readline()


def parse_config():
    """Check config file for settings and set global"""
    global ES_URL, WEBHOOK_URL
    config = configparser.SafeConfigParser()
    try:
        with open(CONFIG_FILE) as cfg_file:
            config.readfp(FakeSectionHead(cfg_file))
        ES_URL = config.get('global', 'elasticsearch_url', ES_URL)
        WEBHOOK_URL = config.get('global', 'webhook_url', WEBHOOK_URL)

    except (configparser.NoSectionError, configparser.NoOptionError, IOError):
        pass


def parse_args():
    """Parse and return arguments from command line"""
    hostname = socket.gethostname()
    username = getpass.getuser()

    parser = argparse.ArgumentParser(description='Log an ops message.')
    parser.add_argument('command', type=str, choices=['add', 'list'],
                        default='add')
    parser.add_argument('message', type=str, nargs='?')
    parser.add_argument('--host', dest='host', default=hostname,
                        help='hostname of server the message applies to')
    parser.add_argument('--user', dest='user', default=username,
                        help='user logging the message')

    return parser.parse_args()


def validate_args(args):
    """Ensure args are valid"""
    if args.command == 'add' and not args.message:
        raise argparse.ArgumentTypeError("An opslog requires a message.")


def build_payload(args):
    """Build ES payload from CLI args"""
    body = copy.deepcopy(args.__dict__)
    del(body['command'])
    body.update({
        'timestamp': datetime.datetime.now().isoformat(),
    })
    return json.dumps(body)


def save_payload(payload):
    """Save log to ES"""
    status_code = 0
    response = ''
    try:
        status_code, response = http_request(ES_URL, payload)
        assert(json.loads(response)['ok'] is True)
        success("opslog saved!")
    except (ValueError, KeyError, AssertionError, urllib2.URLError):
        error("FAILED!\nStatus code: {}\nResponse: {}".format(
            status_code, response))
        error("ElasticSearch URL: {}".format(ES_URL))


def post_webhook(payload):
    """Post JSON to webhook URL"""
    if not WEBHOOK_URL:
        return
    status_code = 0
    response = ''
    try:
        status_code, response = http_request(WEBHOOK_URL, payload)
        assert(status_code < 300)
        success("posted webook")
    except (ValueError, KeyError, AssertionError, urllib2.URLError):
        error("FAILED!\nStatus code: {}\nResponse: {}".format(
            status_code, response))
        error("ElasticSearch URL: {}".format(ES_URL))


def get_logs(host):
    """Retreive logs for host from ES"""
    url = '{}/_search?q=host:{}&sort=timestamp:desc'.format(ES_URL, host)
    status_code = 0
    response = ''
    try:
        status_code, response = http_request(url)
        resp_dict = json.loads(response)
        logs = [hit['_source'] for hit in resp_dict['hits']['hits']]
    except (ValueError, KeyError, urllib2.URLError):
        error("FAILED!\nStatus code: {}\nResponse: {}".format(
            status_code, response))
        error("ElasticSearch URL: {}".format(ES_URL))
        return []

    return logs


def print_logs(logs, host):
    if logs:
        print_table(logs)
    else:
        print('No logs found for host: {}'.format(host))


def opslog():
    parse_config()
    args = parse_args()
    validate_args(args)
    if args.command == 'list':
        logs = get_logs(args.host)
        print_logs(logs, args.host)
    elif args.command == 'add':
        payload = build_payload(args)
        save_payload(payload)
        post_webhook(payload)


if __name__ == '__main__':
    opslog()
